<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CurrentDateNotCompleted" xml:space="preserve">
    <value>The current date isn't completed.</value>
  </data>
  <data name="CurrentDateOutOfRange" xml:space="preserve">
    <value>Current date is out of range.</value>
  </data>
  <data name="DailyDescription" xml:space="preserve">
    <value>Occurs every day. Schedule will be used on {0} at {1} every {2} between {3} and {4} starting on {5} and ending on {6}.</value>
  </data>
  <data name="DateTimeNotCompleted" xml:space="preserve">
    <value>The dateTime isn't completed.</value>
  </data>
  <data name="EnabledIsFalse" xml:space="preserve">
    <value>Enabled is false.</value>
  </data>
  <data name="EndDateIsLessThanStartDate" xml:space="preserve">
    <value>End date is less than start date.</value>
  </data>
  <data name="EndTimeIsLessThanStartDate" xml:space="preserve">
    <value>The end time is less than the start time.</value>
  </data>
  <data name="EveryDay" xml:space="preserve">
    <value>every day</value>
  </data>
  <data name="EveryMonthIsNegative" xml:space="preserve">
    <value>Every month is negative.</value>
  </data>
  <data name="EveryMonthIsZero" xml:space="preserve">
    <value>Every month is zero.</value>
  </data>
  <data name="ExecutionDescription" xml:space="preserve">
    <value>Occurs {0}. Schedule will be used on {1} at {2} starting on {3} and ending on {4}.</value>
  </data>
  <data name="FormClosing" xml:space="preserve">
    <value>Form Closing</value>
  </data>
  <data name="FrequencyDaysIsNegative" xml:space="preserve">
    <value>The frequency days is negative.</value>
  </data>
  <data name="FrequencyDaysIsZero" xml:space="preserve">
    <value>The frequency days is zero.</value>
  </data>
  <data name="MonthDayIsNegative" xml:space="preserve">
    <value>Day of month is negative.</value>
  </data>
  <data name="MonthDayIsZero" xml:space="preserve">
    <value>Day of month is zero.</value>
  </data>
  <data name="MonthlyDescription" xml:space="preserve">
    <value>Occurs the {0} of every {1} months every {2} between {3} and {4} starting on {5} and ending on {6}.</value>
  </data>
  <data name="NotEnabled" xml:space="preserve">
    <value>The scheduler isn't enabled.</value>
  </data>
  <data name="NoWeekDaysSelected" xml:space="preserve">
    <value>No week days selected.</value>
  </data>
  <data name="OccursOnceTimeIsOutOfRange" xml:space="preserve">
    <value>Occurs once time is out of range.</value>
  </data>
  <data name="OnceDateTimeLessThanCurrentDate" xml:space="preserve">
    <value>Once date time is less than current date.</value>
  </data>
  <data name="OnceDescription" xml:space="preserve">
    <value>Occurs once. Schedule will be used on {0} at {1} starting on {2} and ending {3}.</value>
  </data>
  <data name="RecurringDescription" xml:space="preserve">
    <value>Occurs every {0} weeks on {1} {2} between {3} and {4} starting on {5} and ending on {6}.</value>
  </data>
  <data name="StartDateNotCompleted" xml:space="preserve">
    <value>The start date isn't completed.</value>
  </data>
  <data name="TheDateCannotBeRepresented" xml:space="preserve">
    <value>The date can't be represented.</value>
  </data>
  <data name="TheNumberOfTimeUnitIsNegative" xml:space="preserve">
    <value>The times of time unit is negative.</value>
  </data>
  <data name="TheNumberOfTimeUnitIsZero" xml:space="preserve">
    <value>The times of time unit is zero.</value>
  </data>
  <data name="TheWeekFrequencyIsNegative" xml:space="preserve">
    <value>The week frequency is negative.</value>
  </data>
  <data name="TheWeekFrequencyIsZero" xml:space="preserve">
    <value>The week frequency is zero.</value>
  </data>
  <data name="WeeklyDescription" xml:space="preserve">
    <value>Occurs every {0} weeks on {1} every {2} between {3} and {4} starting on {5} and ending on {6}.</value>
  </data>
</root>